devtools::document(".")
library(pollagg)
pollagg::yapa
document()
document()
library(devtools)
load_all()
document()
document()
document()
document()
pollagg::yapa()
library(pollagg)
# General election polls - Obama vs McCain 2008
head(obama_mccain_polls)
library(dplyr)
y <- select(obama_mccain_polls, `McCain (R)`, `Obama (D)`)
n <- select(obama_mccain_polls, n)
poll_dates <- select(obama_mccain_polls, poll_end)
fit <- yapa(y = y, n = n, poll_dates = poll_dates)
obama_mccain_polls
na.omit(obama_mccain_polls)
y
n
poll_dates
#' @param dates a vector of poll dates.
#'
#' @import methods
#' @import Rcpp
#' @import ggplot2
#' @import dplyr
#' @importFrom rstan sampling
#' @useDynLib pollagg, .registration = TRUE
#'
#' @export
yapa <- function(y, n, poll_dates, dates = NULL) {
if(is.null(dates)) dates <- poll_dates
model_data <- list(
n_polls = nrow(y),
n_options = ncol(y),
n_days = length(unique(dates)),
y = y,
n = n,
day_id = match(poll_dates, unique(dates))
)
# Fit model
fit <- yapa.fit(model_data)
ef <- rstan::extract(fit)
# Extract trend
trend_temp <- list()
for(i in 1:model_data$n_options) {
trend_temp[[i]] <- data.frame(
date = unique(dates),
answer = factor(ifelse(!is.null(names(y)[i]), names(y)[i], i)),
mean = apply(ef$mu[, 1:model_data$n_days, i], 2, mean),
lower = apply(ef$mu[, 1:model_data$n_days, i], 2, quantile, 0.05),
upper = apply(ef$mu[, 1:model_data$n_days, i], 2, quantile, 0.95)
)
}
trend <- do.call(rbind, trend_temp)
# Extract poll averages
pct_tmp <- list()
for(i in 1:model_data$n_options) {
pct_tmp[[i]] <- data.frame(
date = poll_dates,
answer = factor(ifelse(!is.null(names(y)[i]), names(y)[i], i)),
mean = apply(ef$theta[, 1:model_data$n_polls, i], 2, mean),
lower = apply(ef$theta[, 1:model_data$n_polls, i], 2, quantile, 0.05),
upper = apply(ef$theta[, 1:model_data$n_polls, i], 2, quantile, 0.95)
)
}
pct <- do.call(rbind, pct_tmp)
# Format poll data
polls_tmp <- list()
for(i in 1:model_data$n_options) {
polls_tmp[[i]] <- data.frame(
date = poll_dates,
answer = factor(ifelse(!is.null(names(y)[i]), names(y)[i], i)),
n = n,
y = dplyr::pull(dplyr::as_tibble(y)[, i])
)
}
polls <- do.call(rbind, polls_tmp)
polls$pct <- polls$y/polls$n
out <- list(
stanfit = fit,
trend = trend,
pct = pct,
data = polls
)
structure(out, class = 'yapafit')
}
fit <- yapa(y = y, n = n, poll_dates = poll_dates)
match(poll_dates, unique(dates))
dates = NULL
is.null(dates)
#' @param dates a vector of poll dates.
#'
#' @import methods
#' @import Rcpp
#' @import ggplot2
#' @import dplyr
#' @importFrom rstan sampling
#' @useDynLib pollagg, .registration = TRUE
#'
#' @export
yapa <- function(y, n, poll_dates, dates = NULL) {
if(is.null(dates)) dates <- poll_dates
model_data <- list(
n_polls = nrow(y),
n_options = ncol(y),
n_days = length(unique(dates)),
y = y,
n = n,
day_id = match(poll_dates, unique(dates))
)
# Fit model
fit <- yapa.fit(model_data)
ef <- rstan::extract(fit)
# Extract trend
trend_temp <- list()
for(i in 1:model_data$n_options) {
trend_temp[[i]] <- data.frame(
date = unique(dates),
answer = factor(ifelse(!is.null(names(y)[i]), names(y)[i], i)),
mean = apply(ef$mu[, 1:model_data$n_days, i], 2, mean),
lower = apply(ef$mu[, 1:model_data$n_days, i], 2, quantile, 0.05),
upper = apply(ef$mu[, 1:model_data$n_days, i], 2, quantile, 0.95)
)
}
trend <- do.call(rbind, trend_temp)
# Extract poll averages
pct_tmp <- list()
for(i in 1:model_data$n_options) {
pct_tmp[[i]] <- data.frame(
date = poll_dates,
answer = factor(ifelse(!is.null(names(y)[i]), names(y)[i], i)),
mean = apply(ef$theta[, 1:model_data$n_polls, i], 2, mean),
lower = apply(ef$theta[, 1:model_data$n_polls, i], 2, quantile, 0.05),
upper = apply(ef$theta[, 1:model_data$n_polls, i], 2, quantile, 0.95)
)
}
pct <- do.call(rbind, pct_tmp)
# Format poll data
polls_tmp <- list()
for(i in 1:model_data$n_options) {
polls_tmp[[i]] <- data.frame(
date = poll_dates,
answer = factor(ifelse(!is.null(names(y)[i]), names(y)[i], i)),
n = n,
y = dplyr::pull(dplyr::as_tibble(y)[, i])
)
}
polls <- do.call(rbind, polls_tmp)
polls$pct <- polls$y/polls$n
out <- list(
stanfit = fit,
trend = trend,
pct = pct,
data = polls
)
structure(out, class = 'yapafit')
}
fit <- yapa(y = y, n = n, poll_dates = poll_dates)
fit <- yapa(y = y, n = n, poll_dates = poll_dates, dates = poll_dates)
match(poll_dates, unique(dates))
dates
dates <- poll_dates
match(poll_dates, unique(dates))
poll_dates
match(poll_dates, unique(dates))
match(c(poll_dates), unique(dates))
pull(poll_dates)
#' @param dates a vector of poll dates.
#'
#' @import methods
#' @import Rcpp
#' @import ggplot2
#' @import dplyr
#' @importFrom rstan sampling
#' @useDynLib pollagg, .registration = TRUE
#'
#' @export
yapa <- function(y, n, poll_dates, dates = NULL) {
poll_dates <- pull(poll_dates)
if(is.null(dates)) dates <- poll_dates
model_data <- list(
n_polls = nrow(y),
n_options = ncol(y),
n_days = length(unique(dates)),
y = y,
n = n,
day_id = match(poll_dates, unique(dates))
)
# Fit model
fit <- yapa.fit(model_data)
ef <- rstan::extract(fit)
# Extract trend
trend_temp <- list()
for(i in 1:model_data$n_options) {
trend_temp[[i]] <- data.frame(
date = unique(dates),
answer = factor(ifelse(!is.null(names(y)[i]), names(y)[i], i)),
mean = apply(ef$mu[, 1:model_data$n_days, i], 2, mean),
lower = apply(ef$mu[, 1:model_data$n_days, i], 2, quantile, 0.05),
upper = apply(ef$mu[, 1:model_data$n_days, i], 2, quantile, 0.95)
)
}
trend <- do.call(rbind, trend_temp)
# Extract poll averages
pct_tmp <- list()
for(i in 1:model_data$n_options) {
pct_tmp[[i]] <- data.frame(
date = poll_dates,
answer = factor(ifelse(!is.null(names(y)[i]), names(y)[i], i)),
mean = apply(ef$theta[, 1:model_data$n_polls, i], 2, mean),
lower = apply(ef$theta[, 1:model_data$n_polls, i], 2, quantile, 0.05),
upper = apply(ef$theta[, 1:model_data$n_polls, i], 2, quantile, 0.95)
)
}
pct <- do.call(rbind, pct_tmp)
# Format poll data
polls_tmp <- list()
for(i in 1:model_data$n_options) {
polls_tmp[[i]] <- data.frame(
date = poll_dates,
answer = factor(ifelse(!is.null(names(y)[i]), names(y)[i], i)),
n = n,
y = dplyr::pull(dplyr::as_tibble(y)[, i])
)
}
polls <- do.call(rbind, polls_tmp)
polls$pct <- polls$y/polls$n
out <- list(
stanfit = fit,
trend = trend,
pct = pct,
data = polls
)
structure(out, class = 'yapafit')
}
fit <- yapa(y = y, n = n, poll_dates = poll_dates, dates = poll_dates)
#' @param dates a vector of poll dates.
#'
#' @import methods
#' @import Rcpp
#' @import ggplot2
#' @import dplyr
#' @importFrom rstan sampling
#' @useDynLib pollagg, .registration = TRUE
#'
#' @export
yapa <- function(y, n, poll_dates, dates = NULL) {
poll_dates <- pull(poll_dates)
if(is.null(dates)) dates <- poll_dates
model_data <- list(
n_polls = nrow(y),
n_options = ncol(y),
n_days = length(unique(dates)),
y = y,
n = n,
day_id = match(poll_dates, unique(dates))
)
# Fit model
fit <- yapa.fit(model_data)
ef <- rstan::extract(fit)
# Extract trend
trend_temp <- list()
for(i in 1:model_data$n_options) {
trend_temp[[i]] <- data.frame(
date = unique(dates),
answer = factor(ifelse(!is.null(names(y)[i]), names(y)[i], i)),
mean = apply(ef$mu[, 1:model_data$n_days, i], 2, mean),
lower = apply(ef$mu[, 1:model_data$n_days, i], 2, quantile, 0.05),
upper = apply(ef$mu[, 1:model_data$n_days, i], 2, quantile, 0.95)
)
}
trend <- do.call(rbind, trend_temp)
# Extract poll averages
pct_tmp <- list()
for(i in 1:model_data$n_options) {
pct_tmp[[i]] <- data.frame(
date = poll_dates,
answer = factor(ifelse(!is.null(names(y)[i]), names(y)[i], i)),
mean = apply(ef$theta[, 1:model_data$n_polls, i], 2, mean),
lower = apply(ef$theta[, 1:model_data$n_polls, i], 2, quantile, 0.05),
upper = apply(ef$theta[, 1:model_data$n_polls, i], 2, quantile, 0.95)
)
}
pct <- do.call(rbind, pct_tmp)
# Format poll data
polls_tmp <- list()
for(i in 1:model_data$n_options) {
polls_tmp[[i]] <- data.frame(
date = poll_dates,
answer = factor(ifelse(!is.null(names(y)[i]), names(y)[i], i)),
n = n,
y = dplyr::pull(dplyr::as_tibble(y)[, i])
)
}
polls <- do.call(rbind, polls_tmp)
polls$pct <- polls$y/polls$n
out <- list(
stanfit = fit,
trend = trend,
pct = pct,
data = polls
)
structure(out, class = 'yapafit')
}
fit <- yapa(y = y, n = n, poll_dates = poll_dates, dates = poll_dates)
poll_dates
poll_dates <- pull(poll_dates)
model_data <- list(
n_polls = nrow(y),
n_options = ncol(y),
n_days = length(unique(dates)),
y = y,
n = n,
day_id = match(poll_dates, unique(dates))
)
model_data
dates
fit <- yapa(y = y, n = n, poll_dates = poll_dates)
y <- select(obama_mccain_polls, `McCain (R)`, `Obama (D)`)
n <- select(obama_mccain_polls, n)
poll_dates <- select(obama_mccain_polls, poll_end)
fit <- yapa(y = y, n = n, poll_dates = poll_dates)
y <- select(obama_mccain_polls, `McCain (R)`, `Obama (D)`)
n <- obama_mccain_polls$n
poll_dates <- obama_mccain_polls$poll_end
fit <- yapa(y = y, n = n, poll_dates = poll_dates)
#' @param dates a vector of poll dates.
#'
#' @import methods
#' @import Rcpp
#' @import ggplot2
#' @import dplyr
#' @importFrom rstan sampling
#' @useDynLib pollagg, .registration = TRUE
#'
#' @export
yapa <- function(y, n, poll_dates, dates = NULL) {
if(is.null(dates)) dates <- poll_dates
model_data <- list(
n_polls = nrow(y),
n_options = ncol(y),
n_days = length(unique(dates)),
y = y,
n = n,
day_id = match(poll_dates, unique(dates))
)
# Fit model
fit <- yapa.fit(model_data)
ef <- rstan::extract(fit)
# Extract trend
trend_temp <- list()
for(i in 1:model_data$n_options) {
trend_temp[[i]] <- data.frame(
date = unique(dates),
answer = factor(ifelse(!is.null(names(y)[i]), names(y)[i], i)),
mean = apply(ef$mu[, 1:model_data$n_days, i], 2, mean),
lower = apply(ef$mu[, 1:model_data$n_days, i], 2, quantile, 0.05),
upper = apply(ef$mu[, 1:model_data$n_days, i], 2, quantile, 0.95)
)
}
trend <- do.call(rbind, trend_temp)
# Extract poll averages
pct_tmp <- list()
for(i in 1:model_data$n_options) {
pct_tmp[[i]] <- data.frame(
date = poll_dates,
answer = factor(ifelse(!is.null(names(y)[i]), names(y)[i], i)),
mean = apply(ef$theta[, 1:model_data$n_polls, i], 2, mean),
lower = apply(ef$theta[, 1:model_data$n_polls, i], 2, quantile, 0.05),
upper = apply(ef$theta[, 1:model_data$n_polls, i], 2, quantile, 0.95)
)
}
pct <- do.call(rbind, pct_tmp)
# Format poll data
polls_tmp <- list()
for(i in 1:model_data$n_options) {
polls_tmp[[i]] <- data.frame(
date = poll_dates,
answer = factor(ifelse(!is.null(names(y)[i]), names(y)[i], i)),
n = n,
y = dplyr::pull(dplyr::as_tibble(y)[, i])
)
}
polls <- do.call(rbind, polls_tmp)
polls$pct <- polls$y/polls$n
out <- list(
stanfit = fit,
trend = trend,
pct = pct,
data = polls
)
structure(out, class = 'yapafit')
}
y <- select(obama_mccain_polls, `McCain (R)`, `Obama (D)`)
n <- obama_mccain_polls$n
poll_dates <- obama_mccain_polls$poll_end
fit <- yapa(y = y, n = n, poll_dates = poll_dates)
library(devtools)
roxygen2::roxygenise(load = "source")
devtools::clean_dll()
pkgbuild::compile_dll()
devtools::document()
load_all()
load_all()
document()
document()
list.files('R')
file.edit("pollagg-package.R")
file.edit("R/pollagg-package.R")
document()
y <- select(obama_mccain_polls, `McCain (R)`, `Obama (D)`)
n <- obama_mccain_polls$n
poll_dates <- obama_mccain_polls$poll_end
fit <- yapa(y = y, n = n, poll_dates = poll_dates)
dim(obama_mccain_polls)
y
yapa.fit <- function(model_data, ...) {
suppressWarnings(
fit <- stan("inst/stan/yapa.stan", data  = model_data)
#fit <- rstan::sampling(stanmodels$yapa, data = model_data)
)
return(fit)
}
y <- select(obama_mccain_polls, `McCain (R)`, `Obama (D)`)
n <- obama_mccain_polls$n
poll_dates <- obama_mccain_polls$poll_end
fit <- yapa(y = y, n = n, poll_dates = poll_dates)
yapa.fit <- function(model_data, ...) {
suppressWarnings(
fit <- stan("inst/stan/yapa.stan", data  = model_data)
#fit <- rstan::sampling(stanmodels$yapa, data = model_data)
)
return(fit)
}
y <- select(obama_mccain_polls, `McCain (R)`, `Obama (D)`)
n <- obama_mccain_polls$n
poll_dates <- obama_mccain_polls$poll_end
fit <- yapa(y = y, n = n, poll_dates = poll_dates)
yapa <- function(y, n, poll_dates, dates = NULL) {
if(is.null(dates)) dates <- poll_dates
model_data <- list(
n_polls = nrow(y),
n_options = ncol(y),
n_days = length(unique(dates)),
y = y,
n = n,
day_id = match(poll_dates, unique(dates))
)
# Fit model
fit <- yapa.fit(model_data)
ef <- rstan::extract(fit)
# Extract trend
trend_temp <- list()
for(i in 1:model_data$n_options) {
trend_temp[[i]] <- data.frame(
date = unique(dates),
answer = factor(ifelse(!is.null(names(y)[i]), names(y)[i], i)),
mean = apply(ef$mu[, 1:model_data$n_days, i], 2, mean),
lower = apply(ef$mu[, 1:model_data$n_days, i], 2, quantile, 0.05),
upper = apply(ef$mu[, 1:model_data$n_days, i], 2, quantile, 0.95)
)
}
trend <- do.call(rbind, trend_temp)
# Extract poll averages
pct_tmp <- list()
for(i in 1:model_data$n_options) {
pct_tmp[[i]] <- data.frame(
date = poll_dates,
answer = factor(ifelse(!is.null(names(y)[i]), names(y)[i], i)),
mean = apply(ef$theta[, 1:model_data$n_polls, i], 2, mean),
lower = apply(ef$theta[, 1:model_data$n_polls, i], 2, quantile, 0.05),
upper = apply(ef$theta[, 1:model_data$n_polls, i], 2, quantile, 0.95)
)
}
pct <- do.call(rbind, pct_tmp)
# Format poll data
polls_tmp <- list()
for(i in 1:model_data$n_options) {
polls_tmp[[i]] <- data.frame(
date = poll_dates,
answer = factor(ifelse(!is.null(names(y)[i]), names(y)[i], i)),
n = n,
y = dplyr::pull(dplyr::as_tibble(y)[, i])
)
}
polls <- do.call(rbind, polls_tmp)
polls$pct <- polls$y/polls$n
out <- list(
stanfit = fit,
trend = trend,
pct = pct,
data = polls
)
structure(out, class = 'yapafit')
}
yapa.fit <- function(model_data, ...) {
suppressWarnings(
fit <- stan("inst/stan/yapa.stan", data  = model_data)
#fit <- rstan::sampling(stanmodels$yapa, data = model_data)
)
return(fit)
}
y <- select(obama_mccain_polls, `McCain (R)`, `Obama (D)`)
n <- obama_mccain_polls$n
poll_dates <- obama_mccain_polls$poll_end
fit <- yapa(y = y, n = n, poll_dates = poll_dates)
